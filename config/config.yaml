# Log Configurations
# log:
#   level: info
#   forceColor: false
#   disableColor: false
#   reportCaller: false
#   # Alert hooking settings
#   alertHook:
#     # Hooked logrus level for alert notification
#     level: warn
#     # Default notification channels
#     channels: []
#     # Maximum request timeout allowed to send alert.
#     SendTimeout: 3s

#     # Async worker options for sending alert
#     async:
#       # The number of worker goroutines (Set to 0 to disable async mode).
#       numWorkers: 0
#       # The maximum number of queued jobs.
#       queueSize: 60
#       # Maximum timeout allowed to gracefully stop.
#       StopTimeout: 5s

#   # File Hooking Configuration
#   fileHook:
#     # Groups define logging configurations for different log levels and outputs.
#     # Each group is identified by a unique, case-insensitive key.
#     groups:
#       # Default log group configuration
#       default:
#         # Enabled log levels: trace, debug, info, warn, error
#         levels: []
#         # Log file path
#         location: ${your_log_path}
#         # File rotation settings
#         rotation:
#           # Maximum file size (in MB) before rotation
#           maxSize: 100
#           # Number of backup files to retain (0 to retain all)
#           maxBackups: 0
#           # Maximum age (in days) before log files are deleted
#           maxAge: 30
#           # Enable compression for rotated log files
#           compress: true

#     # Async worker options for logging to file
#     async:
#       # The number of worker goroutines (Set to 0 to disable async mode).
#       numWorkers: 0
#       # The maximum number of queued jobs.
#       queueSize: 60
#       # Maximum timeout allowed to gracefully stop.
#       StopTimeout: 5s

# Alert Configurations
# alert:
#   # Custom tags are used to distinguish between different networks and environments.
#   # For example, they can be used to differentiate between mainnet/testnet, prod/test/dev, etc.
#   customTags: [dev]

#   # Channels are used for sending notifications.
#   # Each channel is identified by a unique key (e.g., channel ID), which is case insensitive.
#   # The value for each key is the configuration for that channel.
#   channels:
#     # Example configuration for the DingTalk robot channel
#     dingrobot:
#       # The type of the channel. In this case, it's 'dingtalk'.
#       platform: dingtalk
#       # Available message types are `text` and `markdown`.
#       msgType: markdown
#       # The webhook URL for the DingTalk robot.
#       webhook: https://oapi.dingtalk.com/robot/send?access_token=${your_access_token}
#       # The secret key for the DingTalk robot.
#       secret: ${your_access_secret}
#       # List of mobile numbers to be mentioned in the alert. If empty, no one is mentioned.
#       atMobiles: []
#       # If set to true, all members are mentioned in the alert. If false, only the members
#       # in 'atMobiles' are mentioned.
#       isAtAll: false

#     # Example configuration for the Telegram robot channel
#     tgrobot:
#       # The type of the channel. In this case, it's 'telegram'.
#       platform: telegram
#       # The API token for the Telegram robot.
#       apiToken: ${your_api_token}
#       # The chat ID for the Telegram chat where the alerts are sent.
#       chatId: ${your_chat_id}
#       # List of public usernames in the chat to be mentioned.
#       atUsers: []

#     # Example configuration for the SMTP (TLS/SSL only) email channel
#     smtpbot:
#       # The type of the channel. In this case, it's 'smtp'.
#       platform: smtp
#       # The host for the SMTP server (including the port number).
#       host: ${your_smtp_host}
#       # The sender's email address.
#       from: ${your_sender_address}
#       # List of recipient email addresses.
#       to: [${your_recipient_address}]
#       # The password for the SMTP server.
#       password: ${your_smtp_password}

#     # Example configuration for the PagerDuty channel
#     pagerduty:
#       # The type of the channel. In this case, it's 'pagerduty'.
#       platform: pagerduty
#       # The auth token for the PagerDuty service.
#       authToken: ${your_auth_token}
#       # The routinng key for the integration.
#       routingKey: ${your_routing_key}
#       # The unique location of the affected system, preferably a hostname or FQDN.
#       source: ${your_source}

# REST API Configurations
# api:
#   endpoint: :12345
#   recoveryDisabled: false
#   corsOrigins: []
#   logger: false

# Metrics configurations
# metrics:
#   enabled: false
#   reportInterval: 10s
#   influxdb:
#     host: http://127.0.0.1:8086
#     db: metrics_db
#     username:
#     password:
#     namespace:
#     tags:
#       name1: value1
#       name2: value2

# Store Configurations
# store:
#   mysql:
#     host: 127.0.0.1:3306
#     username: root
#     password:
#     database: yourdbname
#     connMaxLifeTime: 3m
#     maxOpenConns: 10
#     maxIdleConns: 10
#     logLevel: warn
#     slowThreshold: 200ms
